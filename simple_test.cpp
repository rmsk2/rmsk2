/***************************************************************************
 * Copyright 2015 Martin Grap
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ***************************************************************************/

#include<iostream>

#include<simple_test.h>

/*! \file simple_test.cpp
 *
 *  \brief Implementation of a primitive unit testing facility.
 *
 */ 

void test_case::print_notes()
{
    vector<string>::iterator iter;    
    
    for (iter = my_notes.begin(); iter != my_notes.end(); ++iter)
    {
        cout << *iter << endl;
    }
}

void composite_test_case::add(test_case *test)
{
    test_cases.push_back(test);
}

bool composite_test_case::test()
{
    vector<test_case *>::iterator iter;
    bool ok = true;
    string temp_note;
    
    for (iter = test_cases.begin(); (iter != test_cases.end()) && ok; ++iter)
    {
        // Notes generated by the sub test cases are prepended with the name of the
        // composite test.
        string test_end_note = get_name() + " -> " + (*iter)->get_name();
        append_note(test_end_note + " start");
        ok = (*iter)->test();
        merge_notes((*iter)->get_notes());
        
        // Make a note whether the current sub test case has been successful or not
        if (!ok)
        {
             test_end_note += " has FAILED!";
        }
        else
        {
            test_end_note += " OK";
        }
        
        append_note(test_end_note);
    }
    
    // Make a note whether all sub test cases have been successful or not
    if (ok)
    {
        temp_note = name + " all OK";
    }
    else
    {
        temp_note = name + " FAILED!";
    }
    
    append_note(temp_note);
    
    return ok;
}


void composite_test_case::merge_notes(vector<string>& notes_to_merge)
{
    vector<string>::iterator iter;    
    
    for (iter = notes_to_merge.begin(); iter != notes_to_merge.end(); ++iter)
    {
        string new_note = name + " -> " + *iter;
        append_note(new_note);
    }        
}
